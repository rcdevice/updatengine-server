#!/bin/bash

################################################
## UpdatEngine-server docker installation script
## 2024/12/05
################################################
#
################################################

# Check this current script line endings style
grep -l $'\r' "${BASH_SOURCE[0]}" && echo "Error: Please convert the file "${BASH_SOURCE[0]}" to Linux-style line endings (LF) then run it again. You can use the command \"sed -i 's/\r//g' ${BASH_SOURCE[0]}\"" && exit 1

INITIAL_DIR=$( pwd )
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
cd $SCRIPT_DIR

# Check required programs
REQUIRED_APPS=''
if [ "$(docker > /dev/null 2>&1 ; echo $?)" -ne 0 ] || [ "$(docker compose > /dev/null 2>&1 ; echo $?)" -ne 0 ] || [ "$(docker buildx > /dev/null 2>&1 ; echo $?)" -ne 0 ]; then
  echo "Error: docker is not installed or not completely." >&2
  REQUIRED_APPS="${REQUIRED_APPS} docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin"
fi
if [ ! -x "$(command -v openssl)" ]; then
  echo "Error: openssl is not installed." >&2
  REQUIRED_APPS="${REQUIRED_APPS} openssl"
fi
if [ ! "${REQUIRED_APPS}" = "" ]; then
  echo "Please run command: apt install${REQUIRED_APPS}"
  cd "${INITIAL_DIR}"
  exit 1
fi

# Set or read custom settings
mkdir -p ./custom
if [ ! -f ./custom/.env ]; then
  echo "################"
  echo "WARNING: The installer will used default site settings. Edit the 'custom/.env' file with your own settings."
  echo "################"
  cp ./custom.dist/env.default ./custom/.env
  while true; do
      read -p "Do you wish to continue with the default settings (y/n) ? " yn
      case $yn in
          [Yy]* ) break;;
          [Nn]* ) echo "Please set your settings in 'custom/.env' file and re-run the installation script."; cd "${INITIAL_DIR}"; exit;;
          * ) echo "Please answer yes or no.";;
      esac
  done
else
  echo "################"
  echo "INFORMATION: The installer is using the settings from 'custom/.env' file."
  echo "################"
fi

# Check and convert the .env line endings style
grep -l $'\r' ./custom/.env && sed -i 's/\r//g' ./custom/.env && echo "Information: The file './custom/.env' was converted from Windows-style line endings (CRLF) to Linux-style line endings (LF)."

# Export all key/value pairs from the '.env' file to the shell environment
export $(cat ./custom/.env) > /dev/null 2>&1
if [ "$CONFIG_TYPE" = "LETSENCRYPT" ]; then
    echo "################"
    echo "ERROR: LETSENCRYPT option is not yet supported."
    echo "################"
    cd "${INITIAL_DIR}"
    exit 1
fi

if [ -f ./custom/nginx/nginx.conf ]; then
    echo "################"
    echo "WARNING: It exists an nginx configuration files in the 'custom' directory."
    echo "Please remove them if you wish a new autogenerated configuration. Otherwise, existing files are kept."
    echo "################"
fi

if [ "$CONFIG_TYPE" = "HTTP_REDIRECT" ] || [ "$CONFIG_TYPE" = "LETSENCRYPT" ]; then
    CONFIG_TYPE=.$CONFIG_TYPE
else
    unset CONFIG_TYPE
fi

if [ ! -f ./custom/nginx/nginx.conf ]; then
    mkdir -p ./custom/nginx
    export DOLLAR='$'
    envsubst < ./nginx/nginx.conf.in$CONFIG_TYPE > ./custom/nginx/nginx.conf
fi

if ([ ! -f ./custom/ssl/site.key ] ||  [ ! -f ./custom/ssl/site.crt ]) && [ "$CONFIG_TYPE" != "LETSENCRYPT" ]; then
    mkdir -p ./custom/ssl
    openssl req --new -newkey rsa:2048 -days 365 -nodes -x509 -keyout ./custom/ssl/site.key -out ./custom/ssl/site.crt -subj "/O=UpdatEngine-NG/CN=updatengine-ng.com" > /dev/null 2>&1
fi

# Copy necessary files to run all dockers
BASE_DIR='../..'
cp Dockerfile $BASE_DIR/
cp entrypoint.sh $BASE_DIR/
envsubst < docker-compose.yml$CONFIG_TYPE > $BASE_DIR/docker-compose.yml
cp ./custom/.env $BASE_DIR/
cat $BASE_DIR/requirements/pip-packages.txt requirements.txt > $BASE_DIR/requirements.txt

cd $BASE_DIR
git pull
docker compose up -d --build

# Create admin account if none
docker exec -it updatengine-server bash -c "echo 'select count(*) from auth_user;' | python manage.py dbshell | grep -v 'count' | grep 0" > /dev/null 2>&1
if [ "$?" = "0" ]; then
    echo "################"
    echo "# CREATE ADMIN ACCOUNT"
    echo "# You can skip this step using CTRL-C and run the following command later:"
    echo "# docker exec -it updatengine-server python manage.py createsuperuser"
    echo "################"
    docker exec -it updatengine-server bash -c "python manage.py createsuperuser"
fi

# Back to initial directory
cd "${INITIAL_DIR}"
